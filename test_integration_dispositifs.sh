#!/bin/bash

# Script de test automatis√© pour v√©rifier l'int√©gration de la gestion des dispositifs
# Test du workflow complet : keybind_editor.php ‚Üí upload XML ‚Üí section gestion dispositifs

echo "üîß Test Automatis√© - Int√©gration Gestion Dispositifs"
echo "================================================"

cd /Users/bteffot/Projects/perso/sc-config-editor

# V√©rifier que le serveur est lanc√©
echo "üì° V√©rification serveur..."
if ! curl -s http://localhost:8080/ > /dev/null; then
    echo "‚ùå Serveur non accessible sur localhost:8080"
    echo "Lancez d'abord: ./start-server.sh"
    exit 1
fi
echo "‚úÖ Serveur accessible"

# V√©rifier les fichiers cl√©s
echo ""
echo "üìÅ V√©rification fichiers..."
files=(
    "assets/js/modules/bindingEditorIntegration.js"
    "assets/js/bindingEditor.js"
    "assets/js/modules/globalLogger.js"
    "keybind_editor.php"
    "templates/edit_form.php"
    "test_integration_xml.xml"
)

for file in "${files[@]}"; do
    if [[ -f "$file" ]]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file MANQUANT"
        exit 1
    fi
done

# Test de la page keybind_editor.php
echo ""
echo "üåê Test page keybind_editor.php..."
response=$(curl -s -w "%{http_code}" http://localhost:8080/keybind_editor.php)
http_code=${response: -3}

if [[ "$http_code" == "200" ]]; then
    echo "‚úÖ Page keybind_editor.php accessible (200)"
else
    echo "‚ùå Erreur HTTP $http_code pour keybind_editor.php"
    exit 1
fi

# V√©rifier que les modules JS sont charg√©s
echo ""
echo "üì¶ V√©rification modules JavaScript..."
js_files=(
    "assets/js/modules/bindingEditorIntegration.js"
    "assets/js/bindingEditor.js" 
    "assets/js/modules/globalLogger.js"
)

for js_file in "${js_files[@]}"; do
    response=$(curl -s -w "%{http_code}" "http://localhost:8080/$js_file")
    http_code=${response: -3}
    
    if [[ "$http_code" == "200" ]]; then
        echo "‚úÖ $js_file accessible"
    else
        echo "‚ùå Erreur $http_code pour $js_file"
        exit 1
    fi
done

# Test simulation upload XML
echo ""
echo "üì§ Test simulation upload XML..."

# Cr√©er un petit script pour tester l'upload
upload_test_html=$(cat << 'EOF'
<!DOCTYPE html>
<html>
<head><title>Test Upload</title></head>
<body>
<form action="keybind_editor.php" method="post" enctype="multipart/form-data" id="uploadForm">
    <input type="file" name="file" accept=".xml" required>
    <input type="submit" value="Upload">
</form>
<script>
// Simuler s√©lection fichier et upload
setTimeout(() => {
    console.log('Test upload XML simulation');
    // En r√©alit√©, on va tester via interface automatis√©e
}, 1000);
</script>
</body>
</html>
EOF
)

echo "$upload_test_html" > test_upload_temp.html
echo "‚úÖ Interface test upload cr√©√©e"

# Test de l'interface automatis√©e
echo ""
echo "üîÑ Test interface automatis√©e..."
response=$(curl -s -w "%{http_code}" http://localhost:8080/test_workflow_automatise.html)
http_code=${response: -3}

if [[ "$http_code" == "200" ]]; then
    echo "‚úÖ Interface test automatis√© accessible"
else
    echo "‚ùå Erreur $http_code pour interface test"
fi

# V√©rifier les logs serveur
echo ""
echo "üìã V√©rification logs serveur (derni√®res lignes)..."
if [[ -f "server.log" ]]; then
    echo "Derni√®res entr√©es du log serveur:"
    tail -5 server.log
else
    echo "‚ö†Ô∏è Pas de fichier server.log trouv√©"
fi

# Instructions pour test manuel
echo ""
echo "üéØ Instructions pour test manuel:"
echo "1. Ouvrir: http://localhost:8080/test_workflow_automatise.html"
echo "2. Cliquer sur 'Test Complet Automatis√©'"
echo "3. V√©rifier que la section 'Gestion des dispositifs' appara√Æt"
echo "4. Tester les boutons 'G√©rer les dispositifs' et 'Importer JSON'"
echo ""
echo "üîç Pour debug approfondi:"
echo "- http://localhost:8080/test_injection_probleme.html"
echo "- http://localhost:8080/test_advanced_debug.html"
echo ""

# Test de contenu des fichiers cl√©s
echo "üîç V√©rification contenu fichiers cl√©s..."

# V√©rifier que bindingEditorIntegration.js contient les nouvelles m√©thodes
if grep -q "debugDOMStructure" assets/js/modules/bindingEditorIntegration.js; then
    echo "‚úÖ bindingEditorIntegration.js contient les am√©liorations debug"
else
    echo "‚ö†Ô∏è bindingEditorIntegration.js pourrait manquer des am√©liorations"
fi

if grep -q "TreeWalker" assets/js/modules/bindingEditorIntegration.js; then
    echo "‚úÖ bindingEditorIntegration.js contient la recherche TreeWalker"
else
    echo "‚ö†Ô∏è bindingEditorIntegration.js pourrait manquer TreeWalker"
fi

# V√©rifier que edit_form.php contient les √©l√©ments attendus
if grep -q "filter-nonempty" templates/edit_form.php; then
    echo "‚úÖ edit_form.php contient filter-nonempty"
else
    echo "‚ùå edit_form.php MANQUE filter-nonempty"
fi

if grep -q "bindings-table" templates/edit_form.php; then
    echo "‚úÖ edit_form.php contient bindings-table"
else
    echo "‚ùå edit_form.php MANQUE bindings-table"
fi

echo ""
echo "‚úÖ Tests automatis√©s termin√©s!"
echo "üéØ √âtape suivante: Tester manuellement avec l'interface automatis√©e"

# Nettoyer
rm -f test_upload_temp.html
