#!/bin/bash

# Script de v√©rification finale - SC Config Editor
# V√©rifie tous les aspects de la mise √† jour de la page d'accueil

echo "üöÄ V√âRIFICATION FINALE - SC CONFIG EDITOR"
echo "=========================================="

PROJECT_ROOT="/Users/bteffot/Projects/perso/sc-config-editor"
cd "$PROJECT_ROOT"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

success_count=0
warning_count=0
error_count=0

function check_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    ((success_count++))
}

function check_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((warning_count++))
}

function check_error() {
    echo -e "${RED}‚ùå $1${NC}"
    ((error_count++))
}

function check_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

echo ""
echo "üìÅ 1. V√âRIFICATION DES FICHIERS PRINCIPAUX"
echo "-------------------------------------------"

# V√©rifier les fichiers HTML essentiels
files_html=("index.html" "keybind_editor.php" "test_final_system.html" "test_configure_button.html" "test_gamepad.html" "test_hat_modes.html" "test_complete_system.html" "validate_button_fix.html")

for file in "${files_html[@]}"; do
    if [ -f "$file" ]; then
        check_success "$file existe"
    else
        check_error "$file manquant"
    fi
done

echo ""
echo "üìö 2. V√âRIFICATION DE LA DOCUMENTATION"
echo "--------------------------------------"

# V√©rifier les fichiers de documentation
docs=("DEVICE_AUTO_DETECTION_GUIDE.md" "DEVICE_AUTO_DETECTION_FINAL_REPORT.md" "VALIDATION_REPORT_BUTTON_FIX.md" "HAT_DYNAMIC_KEYS_FIX_COMPLETE.md" "MAINTENANCE_GUIDE.md")

for doc in "${docs[@]}"; do
    if [ -f "$doc" ]; then
        check_success "$doc disponible"
    else
        check_error "$doc manquant"
    fi
done

echo ""
echo "üîß 3. V√âRIFICATION DES FONCTIONNALIT√âS HOMEPAGE"
echo "------------------------------------------------"

# V√©rifier le contenu de index.html
if grep -q "avec d√©tection automatique des devices" index.html; then
    check_success "Subtitle mis √† jour avec d√©tection automatique"
else
    check_error "Subtitle pas mis √† jour"
fi

if grep -q "new-features" index.html; then
    check_success "Section nouvelles fonctionnalit√©s pr√©sente"
else
    check_error "Section nouvelles fonctionnalit√©s manquante"
fi

if grep -q "feature-tag" index.html; then
    check_success "Tags de fonctionnalit√©s pr√©sents"
else
    check_error "Tags de fonctionnalit√©s manquants"
fi

# V√©rifier les nouveaux liens
new_links=("test_final_system.html" "test_configure_button.html" "validate_button_fix.html")
for link in "${new_links[@]}"; do
    if grep -q "href=\"$link\"" index.html; then
        check_success "Lien vers $link pr√©sent"
    else
        check_error "Lien vers $link manquant"
    fi
done

echo ""
echo "üåê 4. V√âRIFICATION SERVER ET ACCESSIBILIT√â"
echo "-------------------------------------------"

# Tester si le serveur r√©pond
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/index.html | grep -q "200"; then
    check_success "Page d'accueil accessible (HTTP 200)"
else
    check_warning "Serveur non d√©marr√© ou page inaccessible"
fi

# Tester l'accessibilit√© des nouvelles pages
for page in "${new_links[@]}"; do
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000/$page" | grep -q "200"; then
        check_success "$page accessible"
    else
        check_warning "$page non accessible"
    fi
done

echo ""
echo "üì± 5. V√âRIFICATION DU JAVASCRIPT"
echo "--------------------------------"

# V√©rifier les fonctions JavaScript critiques
if grep -q "checkGamepads()" index.html; then
    check_success "Fonction checkGamepads() pr√©sente"
else
    check_error "Fonction checkGamepads() manquante"
fi

if grep -q "openDocumentation" index.html; then
    check_success "Menu documentation am√©lior√© pr√©sent"
else
    check_error "Menu documentation am√©lior√© manquant"
fi

if grep -q "gamepadconnected" index.html; then
    check_success "√âv√©nements gamepad configur√©s"
else
    check_error "√âv√©nements gamepad manquants"
fi

echo ""
echo "üé® 6. V√âRIFICATION DU CSS"
echo "-------------------------"

# V√©rifier les nouvelles classes CSS
if grep -q "\.new-features" index.html; then
    check_success "Classes CSS nouvelles fonctionnalit√©s"
else
    check_error "Classes CSS nouvelles fonctionnalit√©s manquantes"
fi

if grep -q "\.feature-tag" index.html; then
    check_success "Styles feature-tag pr√©sents"
else
    check_error "Styles feature-tag manquants"
fi

if grep -q "icon-auto::before" index.html; then
    check_success "Nouvelles ic√¥nes CSS pr√©sentes"
else
    check_error "Nouvelles ic√¥nes CSS manquantes"
fi

echo ""
echo "üìä R√âSUM√â FINAL"
echo "=================="
total=$((success_count + warning_count + error_count))
success_rate=0
if [ $total -gt 0 ]; then
    success_rate=$((success_count * 100 / total))
fi

echo -e "${GREEN}‚úÖ Succ√®s: $success_count${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  Avertissements: $warning_count${NC}"
echo -e "${RED}‚ùå Erreurs: $error_count${NC}"
echo -e "${BLUE}üìà Taux de r√©ussite: $success_rate%${NC}"

echo ""
if [ $success_rate -ge 90 ]; then
    echo -e "${GREEN}üéâ EXCELLENT! La mise √† jour de la homepage est compl√®te et fonctionnelle.${NC}"
elif [ $success_rate -ge 75 ]; then
    echo -e "${YELLOW}üëç BIEN! La mise √† jour est largement r√©ussie avec quelques points d'attention.${NC}"
else
    echo -e "${RED}‚ö†Ô∏è  ATTENTION! Des probl√®mes importants n√©cessitent une correction.${NC}"
fi

echo ""
echo "üîó LIENS UTILES:"
echo "‚Ä¢ Page d'accueil: http://localhost:8000/index.html"
echo "‚Ä¢ Test syst√®me complet: http://localhost:8000/test_complete_system.html"
echo "‚Ä¢ Validation: http://localhost:8000/validate_button_fix.html"

echo ""
echo "‚ú® V√©rification termin√©e - $(date)"
