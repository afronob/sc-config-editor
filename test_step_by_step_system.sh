#!/bin/bash

# Script de test pour l'√©diteur √©tape par √©tape
# Test de validation compl√®te du nouveau syst√®me

echo "üöÄ Test de l'√âditeur √âtape par √âtape"
echo "======================================"
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# Fonction pour afficher des informations
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Fonction pour afficher des avertissements
print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. V√©rification de la structure des fichiers
echo "1. V√©rification de la structure des fichiers"
echo "---------------------------------------------"

files_to_check=(
    "src/StepByStepEditor.php"
    "step_by_step_handler.php"
    "templates/step_by_step/step1_upload.php"
    "templates/step_by_step/step2_devices.php"
    "templates/step_by_step/step3_edit.php"
    "templates/step_by_step/step4_summary.php"
    "test_step_by_step_editor.html"
)

for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        print_result 0 "Fichier existe: $file"
    else
        print_result 1 "Fichier manquant: $file"
    fi
done

echo ""

# 2. V√©rification de la syntaxe PHP
echo "2. V√©rification de la syntaxe PHP"
echo "----------------------------------"

php_files=(
    "src/StepByStepEditor.php"
    "step_by_step_handler.php"
    "templates/step_by_step/step1_upload.php"
    "templates/step_by_step/step2_devices.php"
    "templates/step_by_step/step3_edit.php"
    "templates/step_by_step/step4_summary.php"
)

for file in "${php_files[@]}"; do
    if [ -f "$file" ]; then
        php -l "$file" > /dev/null 2>&1
        print_result $? "Syntaxe PHP: $file"
    fi
done

echo ""

# 3. V√©rification des permissions
echo "3. V√©rification des permissions"
echo "-------------------------------"

for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        if [ -r "$file" ]; then
            print_result 0 "Permissions lecture: $file"
        else
            print_result 1 "Permissions lecture: $file"
        fi
    fi
done

echo ""

# 4. V√©rification du dossier templates
echo "4. V√©rification du dossier templates"
echo "------------------------------------"

if [ -d "templates/step_by_step" ]; then
    print_result 0 "Dossier templates/step_by_step existe"
    
    # V√©rifier les permissions d'√©criture
    if [ -w "templates/step_by_step" ]; then
        print_result 0 "Permissions √©criture sur templates/step_by_step"
    else
        print_result 1 "Permissions √©criture sur templates/step_by_step"
    fi
else
    print_result 1 "Dossier templates/step_by_step manquant"
    print_info "Cr√©ation du dossier..."
    mkdir -p "templates/step_by_step"
    print_result $? "Cr√©ation du dossier templates/step_by_step"
fi

echo ""

# 5. Test de la classe StepByStepEditor
echo "5. Test de la classe StepByStepEditor"
echo "-------------------------------------"

# Cr√©er un script de test temporaire
cat > test_stepbystep_class.php << 'EOF'
<?php
require_once __DIR__ . '/bootstrap.php';
require_once __DIR__ . '/src/StepByStepEditor.php';

try {
    // Test d'instanciation
    $editor = new StepByStepEditor();
    echo "‚úÖ Instanciation r√©ussie\n";
    
    // Test des m√©thodes publiques
    $result = $editor->canAccessStep(1);
    echo "‚úÖ M√©thode canAccessStep() fonctionne\n";
    
    $step = $editor->getHighestAccessibleStep();
    echo "‚úÖ M√©thode getHighestAccessibleStep() fonctionne\n";
    
    $name = $editor->getStepName(1);
    echo "‚úÖ M√©thode getStepName() fonctionne\n";
    
    $validation = $editor->validateXMLContent('<?xml version="1.0"?><ActionMaps></ActionMaps>');
    echo "‚úÖ M√©thode validateXMLContent() fonctionne\n";
    
    $devices = $editor->detectConnectedDevices();
    echo "‚úÖ M√©thode detectConnectedDevices() fonctionne\n";
    
    echo "‚úÖ Tous les tests de classe r√©ussis\n";
    
} catch (Exception $e) {
    echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    exit(1);
}
EOF

# Ex√©cuter le test
php test_stepbystep_class.php
test_class_result=$?
print_result $test_class_result "Test de la classe StepByStepEditor"

# Nettoyer
rm -f test_stepbystep_class.php

echo ""

# 6. Test des templates HTML
echo "6. Test des templates HTML"
echo "--------------------------"

html_files=(
    "templates/step_by_step/step1_upload.php"
    "templates/step_by_step/step2_devices.php"
    "templates/step_by_step/step3_edit.php"
    "templates/step_by_step/step4_summary.php"
    "test_step_by_step_editor.html"
)

for file in "${html_files[@]}"; do
    if [ -f "$file" ]; then
        # V√©rifier la pr√©sence de balises HTML de base
        if grep -q "<!DOCTYPE html>" "$file" && grep -q "<html" "$file" && grep -q "</html>" "$file"; then
            print_result 0 "Structure HTML valide: $file"
        else
            print_result 1 "Structure HTML invalide: $file"
        fi
    fi
done

echo ""

# 7. Test de l'int√©gration avec l'index
echo "7. Test de l'int√©gration avec l'index"
echo "--------------------------------------"

if [ -f "index.html" ]; then
    if grep -q "step_by_step_handler.php" "index.html"; then
        print_result 0 "Lien vers l'√©diteur √©tape par √©tape pr√©sent dans index.html"
    else
        print_result 1 "Lien vers l'√©diteur √©tape par √©tape manquant dans index.html"
    fi
fi

if [ -f "keybind_editor.php" ]; then
    if grep -q "step-by-step" "keybind_editor.php"; then
        print_result 0 "Int√©gration dans keybind_editor.php pr√©sente"
    else
        print_result 1 "Int√©gration dans keybind_editor.php manquante"
    fi
fi

echo ""

# 8. V√©rification des d√©pendances
echo "8. V√©rification des d√©pendances"
echo "-------------------------------"

dependencies=(
    "src/Application.php"
    "src/XMLProcessor.php"
    "bootstrap.php"
    "config.php"
)

for dep in "${dependencies[@]}"; do
    if [ -f "$dep" ]; then
        print_result 0 "D√©pendance disponible: $dep"
    else
        print_result 1 "D√©pendance manquante: $dep"
    fi
done

echo ""

# 9. Test du serveur (si en cours d'ex√©cution)
echo "9. Test du serveur web"
echo "----------------------"

# V√©rifier si un serveur est en cours d'ex√©cution
if pgrep -f "php.*server" > /dev/null || pgrep -f "php -S" > /dev/null; then
    print_result 0 "Serveur PHP d√©tect√©"
    
    # Tenter une requ√™te de test
    if command -v curl > /dev/null; then
        if curl -s -f -o /dev/null "http://localhost:8000/step_by_step_handler.php?step=1" 2>/dev/null; then
            print_result 0 "Endpoint step_by_step_handler.php accessible"
        else
            print_result 1 "Endpoint step_by_step_handler.php non accessible"
        fi
    else
        print_warning "curl non disponible pour tester les endpoints"
    fi
else
    print_warning "Aucun serveur PHP d√©tect√©. Lancez: php -S localhost:8000"
fi

echo ""

# 10. R√©sum√© final
echo "10. R√©sum√© final"
echo "=================="

echo ""
print_info "üéØ Tests termin√©s pour l'√©diteur √©tape par √©tape"
echo ""
print_info "Pour tester manuellement:"
echo "  1. Lancez le serveur: php -S localhost:8000"
echo "  2. Ouvrez: http://localhost:8000/test_step_by_step_editor.html"
echo "  3. Ou directement: http://localhost:8000/step_by_step_handler.php?step=1"
echo ""
print_info "Documentation des √©tapes:"
echo "  ‚Ä¢ √âtape 1: Upload du fichier XML avec validation"
echo "  ‚Ä¢ √âtape 2: Reconnaissance et configuration des dispositifs"
echo "  ‚Ä¢ √âtape 3: √âdition des mappings avec interface intuitive"
echo "  ‚Ä¢ √âtape 4: R√©sum√© et t√©l√©chargement du fichier modifi√©"
echo ""

if [ $test_class_result -eq 0 ]; then
    echo -e "${GREEN}üéâ L'√©diteur √©tape par √©tape est pr√™t √† √™tre test√© !${NC}"
else
    echo -e "${RED}‚ö†Ô∏è  Des erreurs ont √©t√© d√©tect√©es. V√©rifiez les logs ci-dessus.${NC}"
fi

echo ""
