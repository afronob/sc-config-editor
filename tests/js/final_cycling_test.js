console.log('üéÆ TEST FINAL DU SYST√àME DE CYCLING NAVIGATION');
console.log('==============================================');

// Simuler le syst√®me de cycling
class MockBindingsHandler {
    constructor() {
        this.currentButtonIndex = {};
        this.lastInput = null;
        this.lastInputTime = 0;
    }

    cycleRows(rows, inputName, currentIndexMap) {
        if (!rows.length) {
            console.log(`[CycleRows] Aucune ligne trouv√©e pour ${inputName}`);
            return null;
        }
        
        const now = Date.now();
        const CYCLE_TIMEOUT = 1500;
        
        const isSameInputRepeated = (this.lastInput === inputName && (now - this.lastInputTime) < CYCLE_TIMEOUT);
        
        console.log(`[CycleRows] Input: ${inputName}, Rows: ${rows.length}, LastInput: ${this.lastInput}, TimeDiff: ${now - this.lastInputTime}ms, SameRepeated: ${isSameInputRepeated}`);
        
        if (isSameInputRepeated) {
            const currentIndex = currentIndexMap[inputName] || 0;
            const newIndex = (currentIndex + 1) % rows.length;
            currentIndexMap[inputName] = newIndex;
            console.log(`[CycleRows] Cycling: ${currentIndex} -> ${newIndex}`);
        } else {
            currentIndexMap[inputName] = 0;
            console.log(`[CycleRows] Nouveau input, index reset √† 0`);
        }
        
        this.lastInput = inputName;
        this.lastInputTime = now;
        
        const selectedRow = rows[currentIndexMap[inputName]];
        console.log(`[CycleRows] S√©lection index ${currentIndexMap[inputName]}: ${selectedRow.action}`);
        
        return selectedRow;
    }
}

// Mock des lignes de bindings
const mockRows = [
    { id: 'binding-0', action: 'Throttle Forward' },
    { id: 'binding-1', action: 'Target Ahead' },
    { id: 'binding-2', action: 'Fire Primary' }
];

const singleRow = [
    { id: 'binding-3', action: 'Throttle Backward' }
];

// Tests
const handler = new MockBindingsHandler();
let testsPassed = 0;
let testsFailed = 0;

function assert(condition, message) {
    if (condition) {
        console.log(`‚úÖ PASS: ${message}`);
        testsPassed++;
    } else {
        console.log(`‚ùå FAIL: ${message}`);
        testsFailed++;
    }
}

console.log('\n=== TEST 1: Cycling avec plusieurs bindings ===');
handler.currentButtonIndex = {};
handler.lastInput = null;
handler.lastInputTime = 0;

const result1 = handler.cycleRows(mockRows, 'js1_button1', handler.currentButtonIndex);
assert(result1.id === 'binding-0', 'Premier appui doit s√©lectionner binding-0');

// Appui rapide suivant
const result2 = handler.cycleRows(mockRows, 'js1_button1', handler.currentButtonIndex);
assert(result2.id === 'binding-1', 'Deuxi√®me appui doit s√©lectionner binding-1');

const result3 = handler.cycleRows(mockRows, 'js1_button1', handler.currentButtonIndex);
assert(result3.id === 'binding-2', 'Troisi√®me appui doit s√©lectionner binding-2');

const result4 = handler.cycleRows(mockRows, 'js1_button1', handler.currentButtonIndex);
assert(result4.id === 'binding-0', 'Quatri√®me appui doit revenir √† binding-0 (cycle complet)');

console.log('\n=== TEST 2: Binding unique ===');
handler.currentButtonIndex = {};
handler.lastInput = null;
handler.lastInputTime = 0;

const single1 = handler.cycleRows(singleRow, 'js1_button2', handler.currentButtonIndex);
assert(single1.id === 'binding-3', 'Premier appui binding unique doit s√©lectionner binding-3');

const single2 = handler.cycleRows(singleRow, 'js1_button2', handler.currentButtonIndex);
assert(single2.id === 'binding-3', 'Deuxi√®me appui binding unique doit rester sur binding-3');

console.log('\n=== TEST 3: Reset par timeout ===');
handler.currentButtonIndex = {};
handler.lastInput = null;
handler.lastInputTime = 0;

// Premier cycle
const timeout1 = handler.cycleRows(mockRows, 'js1_button1', handler.currentButtonIndex);
assert(timeout1.id === 'binding-0', 'Premier appui apr√®s reset doit √™tre binding-0');

const timeout2 = handler.cycleRows(mockRows, 'js1_button1', handler.currentButtonIndex);
assert(timeout2.id === 'binding-1', 'Deuxi√®me appui rapide doit √™tre binding-1');

// Simuler un d√©lai de timeout
setTimeout(() => {
    const timeout3 = handler.cycleRows(mockRows, 'js1_button1', handler.currentButtonIndex);
    assert(timeout3.id === 'binding-0', 'Appui apr√®s timeout doit revenir √† binding-0');
    
    console.log('\n==============================================');
    console.log('üéØ R√âSULTATS FINAUX');
    console.log(`‚úÖ Tests r√©ussis: ${testsPassed}`);
    console.log(`‚ùå Tests √©chou√©s: ${testsFailed}`);
    console.log(`üìä Total: ${testsPassed + testsFailed}`);
    
    if (testsFailed === 0) {
        console.log('\nüéâ TOUS LES TESTS SONT PASS√âS!');
        console.log('‚ú® Le syst√®me de cycling navigation fonctionne correctement!');
        console.log('\nüìã PROCHAINES √âTAPES:');
        console.log('1. Tester avec un vrai gamepad sur http://localhost:8000');
        console.log('2. V√©rifier les logs dans la console du navigateur');
        console.log('3. Supprimer les console.log de debug une fois valid√©');
        console.log('4. Le syst√®me est pr√™t pour la production!');
    } else {
        console.log('\n‚ùå PROBL√àMES D√âTECT√âS');
        console.log('V√©rifiez les logs ci-dessus pour identifier les probl√®mes.');
    }
}, 1600); // Attendre plus longtemps que le timeout (1500ms)
